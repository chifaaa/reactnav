{"version":3,"sources":["menu.js","App.js","serviceWorker.js","index.js"],"names":["Menu","props","menu","map","el","i","key","href","target","style","color","isvisited","name","className","drop","display","flexDirection","elm","y","menuItems","ishovered","isclicked","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iNAWiBA,G,UAAO,SAACC,GAAD,OAAUA,EAAMC,KAAKC,KAAI,SAACC,EAAIC,GAAL,OAAU,wBAAIC,IAAKD,GAAI,uBAAGE,KAAMH,EAAGI,QAAS,0BAAMC,MAAO,CAACC,MAAON,EAAGO,UAAY,UAAY,uBAAwBP,EAAGQ,OACrK,wBAAIC,UAAU,SAASJ,MAAOL,EAAGU,KAAM,CAACC,QAAQ,OAAOC,cAAc,UAAU,CAACD,QAAQ,SAAS,6BAAK,6BAAK,6BAA3G,IAAkHX,EAAGU,MAASV,EAAGU,KAAKX,KAAI,SAACc,EAAKC,GAAN,OAC1I,wBAAIL,UAAU,SAASP,IAAKY,GAAG,uBAAGX,KAAMU,EAAIT,QAAQ,8BAAOS,EAAIL,kBCT9DO,EAAY,CACd,CACAP,KAAM,OACNJ,OAAQ,IACRY,WAAU,EACVT,WAAU,EACVU,WAAW,GACX,CACAT,KAAM,WACNJ,OAAQ,IACRM,KAAK,CAAC,CAACF,KAAK,oBAAoBJ,OAAO,IAAIY,WAAU,EAAMT,WAAU,EAAMU,WAAW,GAAO,CAACT,KAAK,eAAeJ,OAAO,IAAIY,WAAU,EAAMT,WAAU,EAAMU,WAAW,GAAO,CAACT,KAAK,gBAAgBJ,OAAO,IAAIY,WAAU,EAAMT,WAAU,EAAMU,WAAW,IAC3PD,WAAU,EACVT,WAAU,EACVU,WAAW,GACX,CACAT,KAAM,UACNJ,OAAQ,IACRY,WAAU,EACVT,WAAU,EACVU,WAAW,IAkBEC,MAdf,WAEE,OACE,yBAAKT,UAAU,OACd,gCACA,wBAAIA,UAAU,OACd,kBAAC,EAAD,CAAMX,KAAMiB,QCrBGI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4cb22d61.chunk.js","sourcesContent":["\nimport React from 'react';\n\n// import ReactDOM from 'react-dom';\n\n        \n// function ShowMeOnHover() \n// {\n//     document.getElementById('uldropid').style.display = \"block\";\n// }\n   \n    export const Menu = (props) =>props.menu.map((el, i) =><li key={i} ><a href={el.target} ><span style={{color: el.isvisited ? '#6bb09d' : 'rgb(100, 100, 100)'}}>{el.name}</span></a>\n   <ul className=\"uldrop\" style={el.drop? {display:'flex',flexDirection:'column'}:{display:'none'}}><br/><br/><br/> {el.drop && (el.drop.map((elm, y) =>\n   <li className='ildrop' key={y}><a href={elm.target}><span>{elm.name}</span></a></li>))}</ul></li>)\n    // className={el.name}\n\n    // export const Menu = (props) =>props.menu.map((el, i) =><li key={i} ><a href={el.target} ><span onmouseover='ShowMeOnHover()' style={{color: el.isvisited ? '#6bb09d' : 'rgb(100, 100, 100)'}}>{el.name}</span></a>\n    // <ul className=\"uldrop\" id='uldropid' style='display:none;'><br/><br/><br/> {el.drop && (el.drop.map((elm, y) =>\n    // <li className='ildrop' key={y}><a href={elm.target}><span>{elm.name}</span></a></li>))}</ul></li>)\n","import React from 'react';\nimport './App.css';\nimport {Menu} from './menu';\n\nlet menuItems = [\n  {\n  name: 'Home',\n  target: '#',\n  ishovered:false,\n  isvisited:true,\n  isclicked: false},\n  {\n  name: 'Services',\n  target: '#',\n  drop:[{name:'For entrepreneurs',target:'#',ishovered:false,isvisited:false,isclicked: false},{name:'For students',target:'#',ishovered:false,isvisited:false,isclicked: false},{name:'For hobbyists',target:'#',ishovered:false,isvisited:false,isclicked: false}],\n  ishovered:false,\n  isvisited:false,\n  isclicked: false},\n  {\n  name: 'Contact',\n  target: '#',\n  ishovered:false,\n  isvisited:false,\n  isclicked: false}\n]\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n     <header>\n     <ul className='the'>\n     <Menu menu={menuItems}/>\n     </ul>\n     </header>\n    </div>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}